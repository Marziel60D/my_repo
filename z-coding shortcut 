const int buzzerPin = 13;
const int buttonPin = 6;
const int potPin = A0;

int buttonState = 0;
int lastButtonState = 0;
bool isPlaying = false;

int melody[] = {262, 294, 330, 349, 392, 440, 494, 523}; // C4 to C5 notes
int noteDurations[] = {4, 4, 4, 4, 4, 4, 4, 4}; // All notes as quarter notes

void setup() {
  pinMode(buzzerPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin with internal pull-up resistor
  Serial.begin(9600); // For debugging
}

void loop() {
  int potValue = analogRead(potPin); // Read potentiometer value
  int pitchOffset = map(potValue, 0, 1023, -100, 100); // Map pot value to pitch offset

  buttonState = digitalRead(buttonPin); // Read button state

  if (buttonState == LOW && lastButtonState == HIGH) {
    // Toggle melody play state on button press
    isPlaying = !isPlaying;
    delay(50); // Simple debounce
  }

  lastButtonState = buttonState; // Save button state for comparison

  if (isPlaying) {
    playMelody(pitchOffset); // Play melody with adjusted pitch
  } else {
    noTone(buzzerPin); // Stop playing melody
  }
}

void playMelody(int pitchOffset) {
  for (int thisNote = 0; thisNote < 8; thisNote++) {
    int noteDuration = 1000 / noteDurations[thisNote]; // Calculate note duration

    int adjustedFrequency = melody[thisNote] + pitchOffset; // Adjust frequency with pitch offset
    tone(buzzerPin, adjustedFrequency, noteDuration); // Play the note with adjusted pitch

    delay(noteDuration * 1.3); // Add delay between notes for legato effect
  }
}