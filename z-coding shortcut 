const int buzzerPin = 13;
const int buttonPin = 6;
const int potPin = A0;

int buttonState = 0;
int lastButtonState = 0;
bool isPlaying = false;

unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;

int melody[] = {262, 294, 330, 349, 392, 440, 494, 523}; // C4 to C5 notes
int noteDurations[] = {4, 4, 4, 4, 4, 4, 4, 4}; // All notes as quarter notes

void setup() {
  pinMode(buzzerPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP); // Button with internal pull-up resistor
  Serial.begin(9600);
}

void loop() {
  int potValue = analogRead(potPin); // Read potentiometer value
  int pitchOffset = map(potValue, 0, 1023, -100, 100); // Map pot value to pitch offset

  int reading = digitalRead(buttonPin); // Read button state
  
  if (reading != lastButtonState) {
    lastDebounceTime = millis(); // Reset the debounce timer
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && buttonState == HIGH) {
      isPlaying = !isPlaying; // Toggle melody play state
    }
    buttonState = reading;
  }

  lastButtonState = reading;

  if (isPlaying) {
    playMelody(pitchOffset); // Play melody with adjusted pitch
  } else {
    noTone(buzzerPin); // Stop the melody
  }
}

void playMelody(int pitchOffset) {
  for (int thisNote = 0; thisNote < 8; thisNote++) {
    if (!isPlaying) break; // Check if melody should stop
    
    int noteDuration = 1000 / noteDurations[thisNote];
    int adjustedFrequency = melody[thisNote] + pitchOffset; // Adjust frequency
    
    tone(buzzerPin, adjustedFrequency, noteDuration);
    delay(noteDuration * 1.3);
  }
}