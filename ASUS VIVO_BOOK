https://wokwi.com/projects/371142586614838273




#include <LiquidCrystal.h>

// LCD pin configuration (RS, EN, D4, D5, D6, D7)
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

// Push button pin definitions
const int btnCountUp = 5;   // Push Button 1 for Count Up
const int btnCountDown = 4; // Push Button 2 for Count Down
const int btnStopReset = 3; // Push Button 3 for Stop/Reset
const int btnNext = 2;      // Push Button 4 for Next Exercise

// Stopwatch states
enum State {
  STOP,
  COUNT_UP,
  COUNT_DOWN
};

volatile State currentState = STOP;
volatile float count = 0.0;
volatile bool counting = false;

// Timer1 interrupt service routine (ISR)
ISR(TIMER1_COMPA_vect) {
  // Increment or decrement the count based on current state
  if (currentState == COUNT_UP) {
    count += 0.1;
    if (count >= 20.0) {
      count = 20.0;
      currentState = STOP;
      counting = false;
    }
  } else if (currentState == COUNT_DOWN) {
    count -= 0.1;
    if (count <= 0.0) {
      count = 0.0;
      currentState = STOP;
      counting = false;
    }
  }
}

// Setup function for Timer1 and other components
void setup() {
  // LCD initialization
  lcd.begin(16, 2);     // 16x2 LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Status: STOP");
  lcd.setCursor(0, 1);
  lcd.print("Count: 0.0 s");

  // Timer1 initialization for 100ms intervals (0.1 seconds)
  noInterrupts();           // Disable all interrupts
  TCCR1A = 0;               // Reset TCCR1A register
  TCCR1B = 0;               // Reset TCCR1B register
  TCNT1 = 0;                // Reset the counter
  OCR1A = 15624;            // Compare match value for 100ms (16MHz / 1024 / 10Hz)
  TCCR1B |= (1 << WGM12);   // Set CTC mode
  TCCR1B |= (1 << CS12) | (1 << CS10); // Set prescaler to 1024
  TIMSK1 |= (1 << OCIE1A);  // Enable Timer1 compare match A interrupt
  interrupts();             // Enable all interrupts
}

// Function to handle the state transitions and button presses
void loop() {
  // Polling buttons and handling state transitions
  if (bit_is_clear(PIND, btnCountUp)) {  // Button 1 (Count Up)
    if (!counting && currentState == STOP) {
      currentState = COUNT_UP;
      counting = true;
    }
    delay(200);  // Debouncing
  }

  if (bit_is_clear(PIND, btnCountDown)) {  // Button 2 (Count Down)
    if (!counting && currentState == STOP) {
      currentState = COUNT_DOWN;
      counting = true;
    }
    delay(200);  // Debouncing
  }

  if (bit_is_clear(PIND, btnStopReset)) {  // Button 3 (Stop/Reset)
    if (counting) {
      counting = false;
      currentState = STOP;
    } else {
      count = 0.0;
    }
    delay(200);  // Debouncing
  }

  // Update the LCD based on current state and count
  updateLCD();
}

// Function to update the LCD display
void updateLCD() {
  lcd.clear();
  
  // Display current state on the first line
  lcd.setCursor(0, 0);
  if (currentState == STOP) {
    lcd.print("Status: STOP");
  } else if (currentState == COUNT_UP) {
    lcd.print("Status: COUNT_UP");
  } else if (currentState == COUNT_DOWN) {
    lcd.print("Status: COUNT_DOWN");
  }

  // Display the count value on the second line
  lcd.setCursor(0, 1);
  lcd.print("Count: ");
  lcd.print(count, 1);  // Print the count value with 1 decimal place
  lcd.print(" s");
}
........

Detailed Schematic

Here is a breakdown of the connections for the LCD and the buttons:

1. LCD Wiring:

RS (Register Select) pin → Pin 12 on Arduino.

EN (Enable) pin → Pin 11 on Arduino.

D4 → Pin 10 on Arduino.

D5 → Pin 9 on Arduino.

D6 → Pin 8 on Arduino.

D7 → Pin 7 on Arduino.

VSS → Ground (GND) on Arduino.

VDD → +5V on Arduino.

V0 (Contrast Pin) → Middle Pin of a 10k Potentiometer, with one end connected to GND and the other to +5V.


2. Button Wiring:

Button 1 (Count Up) → Pin 5 on Arduino.

Button 2 (Count Down) → Pin 4 on Arduino.

Button 3 (Stop/Reset) → Pin 3 on Arduino.

Button 4 (Next) → Pin 2 on Arduino.

Each Button should have one terminal connected to Ground (GND) and the other terminal connected to its respective pin on the Arduino.


3. Pull-Up Resistors:

Make sure that you use internal pull-up resistors or connect external pull-up resistors to each button:

For each button, you can enable the internal pull-up resistor in the setup using:

pinMode(buttonPin, INPUT_PULLUP);

Alternatively, use a 10kΩ external pull-up resistor between the input pin and +5V.


Schematic Diagram (Key Points):

Power: Connect LCD VSS to GND, VDD to 5V.

Contrast Adjustment: The middle pin of the potentiometer goes to the V0 pin of the LCD. The two other pins of the potentiometer connect to GND and 5V, respectively.

Button Pins: Each button should be connected between the respective digital pin and GND.


Detailed Wiring for LCD and Buttons:

Checking the Connections

1. Double-check that the LCD pins are connected correctly to the specified Arduino pins.


2. Ensure that the buttons are connected with one terminal to the respective digital pin and the other to GND.


3. Ensure that you have connected the potentiometer correctly for adjusting the contrast of the LCD.



Final Testing

1. Once all connections are in place, upload the code to your Arduino.


2. Adjust the potentiometer to ensure the LCD characters are visible.


3. Test each button to ensure they perform the expected functions (Count Up, Count Down, Stop/Reset).



This detailed connection



.....


I’ve reviewed the code, and I believe the issue lies in the pin assignments for the LCD. The pins for the LCD control lines might conflict with the button pin configuration or are incorrectly connected in your setup. I’ll address this by revisiting the connections and making sure everything is correctly connected both in the code and schematic.

Corrections to the Code

1. LCD Pins: Ensure the pins connected to the LCD match exactly with what’s defined in the code. The correct wiring for the LCD based on the code is:



LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

This means:

RS (Register Select) is connected to Pin 12.

Enable is connected to Pin 11.

D4, D5, D6, D7 are connected to Pins 10, 9, 8, 7.


Revised Code

Ensure the correct initialization of the LCD and its pins. The rest of the logic is sound, but I’ll focus on re-checking the wiring:

#include <LiquidCrystal.h>

// LCD pin configuration (RS, EN, D4, D5, D6, D7)
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

// Push button pin definitions
const int btnCountUp = 5;   // Push Button 1 for Count Up
const int btnCountDown = 4; // Push Button 2 for Count Down
const int btnStopReset = 3; // Push Button 3 for Stop/Reset
const int btnNext = 2;      // Push Button 4 for Next Exercise

// Stopwatch states
enum State {
  STOP,
  COUNT_UP,
  COUNT_DOWN
};

volatile State currentState = STOP;
volatile float count = 0.0;
volatile bool counting = false;

// Timer1 interrupt service routine (ISR)
ISR(TIMER1_COMPA_vect) {
  // Increment or decrement the count based on current state
  if (currentState == COUNT_UP) {
    count += 0.1;
    if (count >= 20.0) {
      count = 20.0;
      currentState = STOP;
      counting = false;
    }
  } else if (currentState == COUNT_DOWN) {
    count -= 0.1;
    if (count <= 0.0) {
      count = 0.0;
      currentState = STOP;
      counting = false;
    }
  }
}

// Setup function for Timer1 and other components
void setup() {
  // LCD initialization
  lcd.begin(16, 2);     // 16x2 LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Status: STOP");
  lcd.setCursor(0, 1);
  lcd.print("Count: 0.0 s");

  // Timer1 initialization for 100ms intervals (0.1 seconds)
  noInterrupts();           // Disable all interrupts
  TCCR1A = 0;               // Reset TCCR1A register
  TCCR1B = 0;               // Reset TCCR1B register
  TCNT1 = 0;                // Reset the counter
  OCR1A = 15624;            // Compare match value for 100ms (16MHz / 1024 / 10Hz)
  TCCR1B |= (1 << WGM12);   // Set CTC mode
  TCCR1B |= (1 << CS12) | (1 << CS10); // Set prescaler to 1024
  TIMSK1 |= (1 << OCIE1A);  // Enable Timer1 compare match A interrupt
  interrupts();             // Enable all interrupts
}

// Function to handle the state transitions and button presses
void loop() {
  // Polling buttons and handling state transitions
  if (bit_is_clear(PIND, btnCountUp)) {  // Button 1 (Count Up)
    if (!counting && currentState == STOP) {
      currentState = COUNT_UP;
      counting = true;
    }
    delay(200);  // Debouncing
  }

  if (bit_is_clear(PIND, btnCountDown)) {  // Button 2 (Count Down)
    if (!counting && currentState == STOP) {
      currentState = COUNT_DOWN;
      counting = true;
    }
    delay(200);  // Debouncing
  }

  if (bit_is_clear(PIND, btnStopReset)) {  // Button 3 (Stop/Reset)
    if (counting) {
      counting = false;
      currentState = STOP;
    } else {
      count = 0.0;
    }
    delay(200);  // Debouncing
  }

  // Update the LCD based on current state and count
  updateLCD();
}

// Function to update the LCD display
void updateLCD() {
  lcd.clear();
  
  // Display current state on the first line
  lcd.setCursor(0, 0);
  if (currentState == STOP) {
    lcd.print("Status: STOP");
  } else if (currentState == COUNT_UP) {
    lcd.print("Status: COUNT_UP");
  } else if (currentState == COUNT_DOWN) {
    lcd.print("Status: COUNT_DOWN");
  }

  // Display the count value on the second line
  lcd.setCursor(0, 1);
  lcd.print("Count: ");
  lcd.print(count, 1);  // Print the count value with 1 decimal place
  lcd.print(" s");
}

Detailed Schematic

Here is a breakdown of the connections for the LCD and the buttons:

1. LCD Wiring:

RS (Register Select) pin → Pin 12 on Arduino.

EN (Enable) pin → Pin 11 on Arduino.

D4 → Pin 10 on Arduino.

D5 → Pin 9 on Arduino.

D6 → Pin 8 on Arduino.

D7 → Pin 7 on Arduino.

VSS → Ground (GND) on Arduino.

VDD → +5V on Arduino.

V0 (Contrast Pin) → Middle Pin of a 10k Potentiometer, with one end connected to GND and the other to +5V.


2. Button Wiring:

Button 1 (Count Up) → Pin 5 on Arduino.

Button 2 (Count Down) → Pin 4 on Arduino.

Button 3 (Stop/Reset) → Pin 3 on Arduino.

Button 4 (Next) → Pin 2 on Arduino.

Each Button should have one terminal connected to Ground (GND) and the other terminal connected to its respective pin on the Arduino.


3. Pull-Up Resistors:

Make sure that you use internal pull-up resistors or connect external pull-up resistors to each button:

For each button, you can enable the internal pull-up resistor in the setup using:

pinMode(buttonPin, INPUT_PULLUP);

Alternatively, use a 10kΩ external pull-up resistor between the input pin and +5V.


Schematic Diagram (Key Points):

Power: Connect LCD VSS to GND, VDD to 5V.

Contrast Adjustment: The middle pin of the potentiometer goes to the V0 pin of the LCD. The two other pins of the potentiometer connect to GND and 5V, respectively.

Button Pins: Each button should be connected between the respective digital pin and GND.


Detailed Wiring for LCD and Buttons:

Checking the Connections

1. Double-check that the LCD pins are connected correctly to the specified Arduino pins.


2. Ensure that the buttons are connected with one terminal to the respective digital pin and the other to GND.


3. Ensure that you have connected the potentiometer correctly for adjusting the contrast of the LCD.



Final Testing

1. Once all connections are in place, upload the code to your Arduino.


2. Adjust the potentiometer to ensure the LCD characters are visible.


3. Test each button to ensure they perform the expected functions (Count Up, Count Down, Stop/Reset).



This detailed connection

