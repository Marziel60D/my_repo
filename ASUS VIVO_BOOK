xja509x vivo book 2020: 


Hereâ€™s the test specification in plain text without tables for easier copying:

---

**Test Case 1: Button Press - Count Up**  
Objective: Verify that pressing the "Count Up" button correctly increments the timer.  
Setup: Arduino connected to the stopwatch with an LCD and buttons.

Steps:
1. Power on the Arduino.
2. Press the "Count Up" button once.
3. Press the "Count Up" button continuously.
4. Verify that it stops at 20 seconds.

Expected Results:
- LCD should initialize with "00:00" (or the default time).
- The timer increments by 0.1 second per cycle of Timer1 ISR.
- The timer continues to increment until 20.0 seconds.
- Timer display shows 20:00, no further increment happens.

---

**Test Case 2: Button Press - Count Down**  
Objective: Verify that pressing the "Count Down" button correctly decrements the timer.  
Setup: Same as above.

Steps:
1. Power on the Arduino.
2. Press the "Count Down" button once.
3. Press the "Count Down" button continuously.
4. Verify that it stops at 00:00.

Expected Results:
- LCD should initialize with "00:00".
- The timer decrements by 0.1 seconds per cycle of Timer1 ISR.
- The timer continues to decrement until it reaches 00:00.
- Timer display shows 00:00, no further decrement happens.

---

**Test Case 3: Button Press - Stop/Reset**  
Objective: Verify that pressing the "Stop/Reset" button pauses and resets the timer.  
Setup: Same as above.

Steps:
1. Start the timer by pressing "Count Up/Down".
2. Press "Stop/Reset" while counting.
3. Press "Stop/Reset" again.

Expected Results:
- Timer increments or decrements based on the button pressed.
- Timer stops immediately, LCD holds the current time.
- Timer resets to 00:00 and waits for further input.

---

**Test Case 4: Button Press - Next Exercise**  
Objective: Verify that pressing the "Next Exercise" button functions correctly.  
Setup: Same as above.

Steps:
1. Press "Next Exercise" during an active session.
2. Press it again.

Expected Results:
- Display moves to the next exercise or updates to show the next mode (if applicable).
- It continues to switch to the next exercise (or specific functionality in the code).

---

**Test Case 5: Potentiometer Adjustment (Right) - Buzzer Pitch Increase**  
Objective: Verify that turning the potentiometer to the right increases the pitch.  
Setup: Arduino connected to the buzzer and potentiometer.

Steps:
1. Turn the potentiometer fully left.
2. Gradually turn the potentiometer to the right.

Expected Results:
- Buzzer plays the lowest pitch.
- Buzzer pitch increases gradually based on the potentiometer position.

---

**Test Case 6: Potentiometer Adjustment (Left) - Buzzer Pitch Decrease**  
Objective: Verify that turning the potentiometer to the left decreases the pitch.  
Setup: Same as above.

Steps:
1. Turn the potentiometer fully right.
2. Gradually turn the potentiometer to the left.

Expected Results:
- Buzzer plays the highest pitch.
- Buzzer pitch decreases gradually based on the potentiometer position.

---

**Test Case 7: Button Press - Pause/Resume Buzzer**  
Objective: Verify the functionality of the pause/resume button for controlling buzzer playback.  
Setup: Arduino connected to the buzzer and pause button.

Steps:
1. Start playing the melody on the buzzer.
2. Press the "Pause" button.
3. Press the "Pause" button again.

Expected Results:
- Buzzer plays the melody as expected.
- Buzzer stops playing the melody.
- Buzzer resumes playing the melody from where it stopped.

---

**Test Case 8: EEPROM - Saving and Loading Pitch Adjustment**  
Objective: Verify that the pitch adjustments are saved to and loaded from EEPROM correctly.  
Setup: Same as above.

Steps:
1. Adjust the pitch using the potentiometer.
2. Save the current pitch to EEPROM.
3. Power off and power on the Arduino.
4. Verify the buzzer plays at the saved pitch.

Expected Results:
- Buzzer pitch changes as the potentiometer is adjusted.
- The current pitch is saved in EEPROM.
- The previously saved pitch should load from EEPROM automatically on startup.
- Buzzer plays at the pitch saved before powering off.

---

**Test Case 9: Melody Playback - Mute Buzzer at End**  
Objective: Verify that the buzzer mutes after playing the melody without affecting other notes.  
Setup: Arduino connected to the buzzer, melody playback programmed.

Steps:
1. Start playing the melody on the buzzer.
2. Listen for the end of the melody.

Expected Results:
- Buzzer plays the melody normally.
- Buzzer mutes at the end of the melody without extending a flat sound.

////////////////////////////////////


Here's the **test specification** in plain text format for the provided Arduino code:

---

**Test Case 1: Button Press - Count Up**  
Objective: Verify that pressing the "Count Up" button correctly starts counting up.  
Setup: Arduino connected to the LCD and buttons.

Steps:
1. Power on the Arduino.
2. Press the "Count Up" button (Pin 5).
3. Wait for the timer to count up.
4. Verify that the timer stops at 20 seconds.

Expected Results:
- The stopwatch starts counting up.
- The timer increments by tenths of a second.
- The stopwatch stops automatically at 20 seconds.

---

**Test Case 2: Button Press - Count Down**  
Objective: Verify that pressing the "Count Down" button correctly starts counting down.  
Setup: Same as above.

Steps:
1. Power on the Arduino.
2. Press the "Count Down" button (Pin 4).
3. Wait for the timer to count down.
4. Verify that the timer stops at 00:00.

Expected Results:
- The stopwatch starts counting down.
- The timer decrements by tenths of a second.
- The stopwatch stops automatically when it reaches 00:00.

---

**Test Case 3: Button Press - Stop/Reset**  
Objective: Verify that pressing the "Stop/Reset" button either stops or resets the stopwatch.  
Setup: Same as above.

Steps:
1. Start the timer by pressing either "Count Up" or "Count Down".
2. Press the "Stop/Reset" button (Pin 3).
3. Press the "Stop/Reset" button again.

Expected Results:
- The timer stops when the button is pressed the first time.
- The timer resets to 00:00 when the button is pressed the second time.

---

**Test Case 4: Button Press - Wait Time Increase**  
Objective: Verify that pressing the "Wait Time Increase" button increases the wait time.  
Setup: Same as above.

Steps:
1. Press the "Wait Time Increase" button (Pin 2).
2. Repeat pressing it several times.
3. Verify the wait time on the LCD.

Expected Results:
- Each press increases the wait time by 60 ms.
- The updated wait time is displayed on the LCD.

---

**Test Case 5: LCD Display - Display Stopwatch State and Time**  
Objective: Verify that the LCD displays the current state (STOP, COUNT UP, COUNT DOWN) and the time correctly.  
Setup: Arduino connected to the LCD.

Steps:
1. Power on the Arduino.
2. Start the timer by pressing "Count Up" or "Count Down".
3. Observe the LCD display.

Expected Results:
- The first line of the LCD shows the current state: "STOP", "COUNT UP", or "COUNT DOWN".
- The second line shows the time in the format `XX.X s` and the wait time in `XX ms`.

---

**Test Case 6: Timer1 - 10ms Intervals**  
Objective: Verify that Timer1 generates an interrupt every 10 ms to update the stopwatch.  
Setup: Arduino with the Timer1 ISR enabled.

Steps:
1. Power on the Arduino.
2. Start counting up or down.
3. Observe the time increments.

Expected Results:
- The stopwatch increments or decrements the time by 0.1 second every 10 ISR calls.

---

**Test Case 7: Watchdog Timer - 250ms Timeout**  
Objective: Verify that the watchdog timer resets the system if not refreshed every 250 ms.  
Setup: Same as above.

Steps:
1. Power on the Arduino.
2. Remove or comment out the `refreshWatchdog()` function temporarily.
3. Wait for 250 ms and observe the system reset.

Expected Results:
- The system resets after 250 ms if the watchdog is not refreshed.

---

**Test Case 8: Button Debouncing**  
Objective: Verify that the buttons are debounced with a delay of 200 ms.  
Setup: Same as above.

Steps:
1. Press any button.
2. Observe the button's response.

Expected Results:
- Button presses are debounced with a delay of 200 ms to prevent multiple triggers from a single press.

---

**Test Case 9: Time Update Logic**  
Objective: Verify that the time update logic works correctly for both count up and count down modes.  
Setup: Same as above.

Steps:
1. Start the stopwatch in count-up mode and observe time increments.
2. Start the stopwatch in count-down mode and observe time decrements.

Expected Results:
- Time increments properly from 0 up to 20 seconds in count-up mode.
- Time decrements properly down to 00:00 in count-down mode.

