#include <EEPROM.h>
#include <Tone.h> // Library for tone generation (download this if not installed)

// Pin assignments
const int potentiometerPin = A0; // Analog pin for potentiometer
const int button1Pin = 6;        // Digital pin for play/stop button
const int button2Pin = 5;        // Digital pin for recording pitch button
const int speakerPin = 13;       // Speaker pin
const int eepromAddress = 0;     // EEPROM address to store pitch value

// Global variables
int lastPitch = 440;             // Default pitch (A4, 440Hz)
int currentPitch = 0;
bool isPlaying = false;
int melodyPosition = 0;          // Track melody position
bool melodyStopped = false;

void setup() {
  pinMode(button1Pin, INPUT_PULLUP);
  pinMode(button2Pin, INPUT_PULLUP);
  pinMode(speakerPin, OUTPUT);

  // Read last stored pitch from EEPROM
  int storedPitch = EEPROM.read(eepromAddress);
  if (storedPitch != 0xFF) { // EEPROM default state check
    lastPitch = storedPitch;
  }

  currentPitch = lastPitch + analogRead(potentiometerPin) / 10; // Adjust pitch based on potentiometer

  // Start playing melody on power-on
  playMelody();
}

void loop() {
  int potValue = analogRead(potentiometerPin);
  currentPitch = lastPitch + map(potValue, 0, 1023, -100, 100); // Â±100 Hz adjustment

  // Handle play/stop button
  if (digitalRead(button1Pin) == LOW) {
    togglePlayStop();
    delay(200); // Debounce delay
  }

  // Handle pitch save button
  if (digitalRead(button2Pin) == LOW) {
    savePitchToEEPROM();
    delay(200); // Debounce delay
  }

  // Handle simultaneous button press (reset)
  if (digitalRead(button1Pin) == LOW && digitalRead(button2Pin) == LOW) {
    resetSystem();
    delay(200); // Debounce delay
  }

  // Continue playing the melody if not stopped
  if (isPlaying) {
    playMelody();
  }
}

void playMelody() {
  // Example melody tones, replace with actual melody
  int melody[] = {440, 494, 523, 587, 659, 698, 784};
  int noteDuration = 500; // Duration of each note (milliseconds)

  // Play notes with current pitch
  for (int i = melodyPosition; i < 7; i++) {
    tone(speakerPin, melody[i] + currentPitch, noteDuration);
    delay(noteDuration);
  }

  // Restart melody
  melodyPosition = 0;
}

void togglePlayStop() {
  if (isPlaying) {
    noTone(speakerPin); // Stop the tone
    melodyStopped = true;
  } else {
    melodyStopped = false;
  }
  isPlaying = !isPlaying;
}

void savePitchToEEPROM() {
  lastPitch = currentPitch;
  EEPROM.write(eepromAddress, lastPitch);
}

void resetSystem() {
  noTone(speakerPin);
  isPlaying = false;
  melodyPosition = 0;  // Start melody from the beginning
}
