Test Set 1: Basic Functionality
Test Case 1.1: Counting Up
Input: Push Button 1 (Count Up)
Expected Output: LCD displays "COUNT_UP" on the first line, and the time counts up from 00.0 in 0.1-second increments.
After 1 second: LCD displays 01.0 s.
After 10 seconds: LCD displays 10.0 s.
After 20 seconds: LCD stops counting and displays 20.0 s, with the state returning to "STOP".
Test Case 1.2: Counting Down
Input: Push Button 2 (Count Down)
Expected Output: LCD displays "COUNT_DOWN" on the first line, and the time counts down from 20.0 in 0.1-second decrements.
After 1 second: LCD displays 19.0 s.
After 10 seconds: LCD displays 10.0 s.
After 20 seconds: LCD stops counting and displays 00.0 s, with the state returning to "STOP".
Test Case 1.3: Stop and Reset
Input: Push Button 1 (Count Up), wait for 5 seconds, then push Button 3 (Stop/Reset)
Expected Output: LCD shows the current state as "STOP" and freezes the count (e.g., 05.0 s).
Action: Push Button 3 (Stop/Reset) again to reset the count.
Expected Output: LCD displays 00.0 s, and the system remains in the "STOP" state.
Test Set 2: Button Debouncing and Transitions
Test Case 2.1: Multiple Button Presses
Input: Push Button 1 (Count Up) and Button 3 (Stop/Reset) immediately after, within 200 ms.
Expected Output: The system should not register both presses as one. It should only respond to the first button press (Count Up) and start counting, with "COUNT_UP" displayed.
Test Case 2.2: Transition Between Count Up and Count Down
Input: Push Button 1 (Count Up), wait for 5 seconds, then push Button 2 (Count Down).
Expected Output: The system should stop counting up and immediately switch to "COUNT_DOWN" and begin counting down from the current time (e.g., from 05.0 s to 04.9 s, etc.).
Test Set 3: Boundary Conditions
Test Case 3.1: Maximum Time Boundary
Input: Push Button 1 (Count Up) and wait until the time reaches 20.0 s.
Expected Output: The system should stop automatically once the time reaches 20.0 s and display "STOP" without exceeding 20.0 s.
Test Case 3.2: Minimum Time Boundary
Input: Push Button 2 (Count Down) and wait until the time reaches 00.0 s.
Expected Output: The system should stop automatically once the time reaches 00.0 s and display "STOP" without going below 00.0 s.
Test Set 4: Usability and Edge Case Handling
Test Case 4.1: Button Press Without Reset
Input: Push Button 1 (Count Up) and allow the timer to count up to 15.0 s. Push Button 3 (Stop/Reset) and then push Button 1 (Count Up) again.
Expected Output: The timer should start counting up from where it left off (15.0 s).
Test Case 4.2: Simultaneous Button Presses
Input: Push both Button 1 (Count Up) and Button 2 (Count Down) simultaneously.
Expected Output: The system should ignore this input and remain in its current state (either "STOP", "COUNT_UP", or "COUNT_DOWN").
Test Set 5: LCD Display Tests
Test Case 5.1: Leading Zero Display
Input: Push Button 1 (Count Up) and allow the time to count up to 09.9 s.
Expected Output: LCD should display leading zeros, ensuring the format is 09.9 s instead of 9.9 s.
Test Case 5.2: Correct Decimal Point Precision
Input: Push Button 1 (Count Up) or Button 2 (Count Down) and observe the time.
Expected Output: The time should display with one decimal precision (e.g., 10.5 s instead of 10.50 s).
////////

To ensure your LCD (16x2) is correctly connected to your Arduino Uno and matches the code, here is a circuit diagram for wiring the LCD to your Arduino. I'll describe the pin connections step-by-step, ensuring they align with the pin definitions in your code.

### **Components Needed:**
1. **16x2 LCD Display** (with 16 pins)
2. **Arduino Uno**
3. **10kΩ Potentiometer** (for LCD contrast control)
4. **Push Buttons** (4x for count up, count down, stop/reset, and next exercise)
5. **Jumper Wires** (M/M)
6. **Breadboard**

### **Pin Configuration Based on Your Code:**
The code uses the following pin assignments for the LCD and buttons:
- **LCD Pins**:
  - RS: Pin 12
  - EN: Pin 11
  - D4: Pin 10
  - D5: Pin 9
  - D6: Pin 8
  - D7: Pin 7
- **Push Buttons**:
  - Button 1 (Count Up): Pin 5
  - Button 2 (Count Down): Pin 4
  - Button 3 (Stop/Reset): Pin 3
  - Button 4 (Next Exercise): Pin 2

### **LCD to Arduino Wiring:**
1. **VSS (Pin 1 on LCD)**: Connect to **GND** on Arduino.
2. **VDD (Pin 2 on LCD)**: Connect to **5V** on Arduino.
3. **V0 (Pin 3 on LCD)**: Connect to the **middle pin of the potentiometer**. The other two pins of the potentiometer connect to **GND** and **5V**. (This controls the contrast of the display).
4. **RS (Pin 4 on LCD)**: Connect to **Pin 12** on Arduino.
5. **RW (Pin 5 on LCD)**: Connect to **GND** (for write mode).
6. **EN (Pin 6 on LCD)**: Connect to **Pin 11** on Arduino.
7. **D4 (Pin 11 on LCD)**: Connect to **Pin 10** on Arduino.
8. **D5 (Pin 12 on LCD)**: Connect to **Pin 9** on Arduino.
9. **D6 (Pin 13 on LCD)**: Connect to **Pin 8** on Arduino.
10. **D7 (Pin 14 on LCD)**: Connect to **Pin 7** on Arduino.
11. **A (Pin 15 on LCD)**: Connect to **5V** (for the backlight).
12. **K (Pin 16 on LCD)**: Connect to **GND** (for the backlight).

### **Push Button to Arduino Wiring:**
1. **Button 1 (Count Up)**: Connect one leg to **Pin 5**, and the other leg to **GND**.
2. **Button 2 (Count Down)**: Connect one leg to **Pin 4**, and the other leg to **GND**.
3. **Button 3 (Stop/Reset)**: Connect one leg to **Pin 3**, and the other leg to **GND**.
4. **Button 4 (Next Exercise)**: Connect one leg to **Pin 2**, and the other leg to **GND**.

You can add **pull-up resistors** if needed, but in your code, you are using the internal pull-up resistors via `PORTD |= (1 << btnX);`, so no external resistors are needed.

### **Breadboard Setup Diagram:**
To simulate this visually:
- Place the LCD on the breadboard.
- Wire the **RS, EN, D4-D7** pins to the corresponding Arduino pins as mentioned.
- Wire the **VSS**, **VDD**, **RW**, and **backlight pins** for power connections.
- Add the **10kΩ potentiometer** for adjusting the contrast of the LCD.
- Connect the **four push buttons** to their respective pins (2, 3, 4, 5) on the Arduino, and one leg of each button should go to GND.

Once wired up, upload your code and adjust the contrast using the potentiometer if the LCD screen is still only blue.

### **Troubleshooting Tips:**
1. **Backlight but No Text**: If the LCD is glowing but showing no characters, check the contrast (adjust the potentiometer). If it's still not working, double-check your wiring and the pin numbers defined in the code.
2. **No Backlight**: Ensure the backlight pins (A and K) are correctly connected to **5V** and **GND**.
3. **No Response from Buttons**: Check the connections from the buttons to the Arduino pins and make sure the pull-up resistors are enabled in the code.

Let me know if you need further assistance!

//////

### **Revised Circuit Setup Without a Potentiometer:**

In this setup, we will replace the potentiometer (used to adjust contrast) with a **fixed resistor**. A value between **1kΩ to 10kΩ** usually works well, but you may need to try a few different values to get the best contrast for your specific display.

### **LCD to Arduino Wiring (Without Potentiometer):**
1. **VSS (Pin 1 on LCD)**: Connect to **GND** on Arduino.
2. **VDD (Pin 2 on LCD)**: Connect to **5V** on Arduino.
3. **V0 (Pin 3 on LCD)**: Connect to **GND** **through a fixed resistor**. You can start with a **1kΩ resistor** and see if the contrast is acceptable.
4. **RS (Pin 4 on LCD)**: Connect to **Pin 12** on Arduino.
5. **RW (Pin 5 on LCD)**: Connect to **GND** (for write mode).
6. **EN (Pin 6 on LCD)**: Connect to **Pin 11** on Arduino.
7. **D4 (Pin 11 on LCD)**: Connect to **Pin 10** on Arduino.
8. **D5 (Pin 12 on LCD)**: Connect to **Pin 9** on Arduino.
9. **D6 (Pin 13 on LCD)**: Connect to **Pin 8** on Arduino.
10. **D7 (Pin 14 on LCD)**: Connect to **Pin 7** on Arduino.
11. **A (Pin 15 on LCD)**: Connect to **5V** (for the backlight).
12. **K (Pin 16 on LCD)**: Connect to **GND** (for the backlight).

### **Fixed Resistor Instead of Potentiometer:**
- **V0 (Pin 3)** on the LCD will now be connected to **GND** through a resistor, as mentioned above. Start with a **1kΩ resistor**, and if the contrast is too dark or too light, you can try values like **5kΩ** or **10kΩ** until you get good visibility.

### **Push Button to Arduino Wiring (Same as Before):**
1. **Button 1 (Count Up)**: Connect one leg to **Pin 5**, and the other leg to **GND**.
2. **Button 2 (Count Down)**: Connect one leg to **Pin 4**, and the other leg to **GND**.
3. **Button 3 (Stop/Reset)**: Connect one leg to **Pin 3**, and the other leg to **GND**.
4. **Button 4 (Next Exercise)**: Connect one leg to **Pin 2**, and the other leg to **GND**.

### **Code Adjustments:**
No changes are needed to the code. This approach only modifies the physical circuit by using a fixed resistor instead of a potentiometer for contrast control.

### **Testing:**
1. **Power on** the Arduino.
2. The LCD should light up, and the contrast should be visible. If the characters on the LCD are too light or too dark, change the resistor value accordingly.
3. Test the buttons as per the specifications you created to ensure the system operates correctly.

By using a fixed resistor, you're simplifying the circuit while ensuring that the LCD operates with consistent contrast.
