#include <EEPROM.h>  // Include EEPROM library for saving pitch

// Pin definitions
const int buttonPin1 = 6;   // Button 1 for toggling play/stop
const int buttonPin2 = 5;   // Button 2 for recording pitch
const int buzzerPin = 13;   // Speaker
const int potPin = A0;      // Potentiometer

// Melody settings (same as the original melody in "Tone Melody" example)
int melody[] = {
  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
};
int noteDurations[] = {4, 8, 8, 4, 4, 4, 4, 4};
int numNotes = sizeof(melody) / sizeof(melody[0]);

// Playback control variables
bool isPlaying = false;
int lastButton1State = LOW;
int lastButton2State = LOW;
int melodyPosition = 0;  // Keep track of where the melody stopped
int storedPitchAdjust = 0; // Value stored in EEPROM
int pitchAdjust = 0;  // Adjusted pitch based on potentiometer

void setup() {
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600);

  // Retrieve stored pitch adjust value from EEPROM (Address 0)
  storedPitchAdjust = EEPROM.read(0);

  // Print stored pitch on startup
  Serial.print("Stored Pitch from EEPROM: ");
  Serial.println(storedPitchAdjust);
}

void loop() {
  // Read potentiometer value and map it to pitch adjustment range (-100Hz to +100Hz)
  int potValue = analogRead(potPin);
  pitchAdjust = map(potValue, 0, 1023, -100, 100);

  // Read button states
  int button1State = digitalRead(buttonPin1);
  int button2State = digitalRead(buttonPin2);

  // Handle button 1 for toggling play/stop
  if (button1State == HIGH && lastButton1State == LOW) {
    isPlaying = !isPlaying;  // Toggle between play and stop
    delay(50);               // Debouncing delay
  }
  lastButton1State = button1State;  // Update the last state of button 1

  // Handle button 2 for recording pitch
  if (button2State == HIGH && lastButton2State == LOW) {
    EEPROM.write(0, pitchAdjust);  // Store the current pitch adjustment value in EEPROM
    storedPitchAdjust = pitchAdjust;  // Update the stored pitch
    Serial.print("Pitch saved to EEPROM: ");
    Serial.println(storedPitchAdjust);
    delay(50);  // Debouncing delay
  }
  lastButton2State = button2State;  // Update the last state of button 2

  // Handle simultaneous button press (both button 1 and 2)
  if (button1State == HIGH && button2State == HIGH) {
    isPlaying = false;  // Stop melody playback
    melodyPosition = 0;  // Reset melody position to start
  }

  // Play melody if it's toggled to play mode
  if (isPlaying) {
    // Print the current pitch being applied
    Serial.print("Stored Pitch: ");
    Serial.print(storedPitchAdjust);
    Serial.print(", Current Pitch Adjust (Potentiometer): ");
    Serial.println(pitchAdjust);

    int adjustedFrequency = melody[melodyPosition] + storedPitchAdjust + pitchAdjust; // Apply stored and current pitch adjustment

    // Calculate note duration
    int noteDuration = 1000 / noteDurations[melodyPosition];
    tone(buzzerPin, adjustedFrequency, noteDuration);

    // Wait for the note to finish playing
    delay(noteDuration * 1.30);
    noTone(buzzerPin);  // Stop the tone

    // Move to the next note
    melodyPosition++;
    if (melodyPosition >= numNotes) {
      melodyPosition = 0;  // Loop back to the start of the melody
    }
  } else {
    noTone(buzzerPin);  // Ensure buzzer is off when stopped
  }
}