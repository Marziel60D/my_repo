#include "pitches.h"  // Include note library

// Pin definitions
const int buttonPin = 6;   // Push button connected to digital pin 6
const int buzzerPin = 13;  // Buzzer connected to digital pin 13
const int potPin = A0;     // Potentiometer connected to analog pin A0

// Melody settings (from your provided song)
int melody[] = {
  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
};

// Note durations: 4 = quarter note, 8 = eighth note, etc.
int noteDurations[] = {
  4, 8, 8, 4, 4, 4, 4, 4
};

int numNotes = sizeof(melody) / sizeof(melody[0]);

// Button and playback state
bool isPlaying = false;  // To keep track of whether the melody is playing or not
bool lastButtonState = LOW; // Last button state for debouncing
bool buttonPressed = false; // To check if the button has been pressed

void setup() {
  pinMode(buttonPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600); // For debugging purposes
}

void loop() {
  // Read the potentiometer value and map it to pitch adjustment range (-100Hz to +100Hz)
  int potValue = analogRead(potPin);
  int pitchAdjust = map(potValue, 0, 1023, -100, 100);
  
  // Read the current button state
  bool buttonState = digitalRead(buttonPin);
  
  // Toggle play/stop when the button is pressed (with debouncing)
  if (buttonState == HIGH && lastButtonState == LOW) {
    buttonPressed = !buttonPressed;  // Toggle the button pressed state
    delay(50);  // Debouncing delay
  }
  
  lastButtonState = buttonState; // Update the last button state

  // Update buzzer state based on button pressed state
  if (buttonPressed) {
    if (!isPlaying) {
      isPlaying = true; // Start playing the melody
    }
  } else {
    isPlaying = false; // Stop playing the melody
  }

  // If the melody should be playing
  if (isPlaying) {
    // Loop through all notes of the melody
    for (int thisNote = 0; thisNote < numNotes; thisNote++) {
      // Adjust the pitch of each note based on the potentiometer
      int adjustedFrequency = melody[thisNote] + pitchAdjust;

      // Calculate the note duration (e.g. quarter note = 1000 / 4)
      int noteDuration = 1000 / noteDurations[thisNote];

      // Play the note with the adjusted frequency
      tone(buzzerPin, adjustedFrequency, noteDuration);
      
      // Pause between notes (note duration + 30%)
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      
      // Stop the buzzer between notes
      noTone(buzzerPin);
      
      // Check if the button is pressed again to stop during playback
      buttonState = digitalRead(buttonPin);
      if (buttonState == HIGH && lastButtonState == LOW) {
        isPlaying = false;  // Stop the melody
        noTone(buzzerPin);  // Stop the buzzer immediately
        delay(50);          // Debouncing delay
        break;              // Exit the note loop to stop the melody
      }
      lastButtonState = buttonState; // Update the last button state
    }
  } else {
    noTone(buzzerPin);  // Stop the buzzer when the melody is stopped
  }
}