#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MaxLength 11
#define Maxcount 5

typedef struct {
    char *name;
    long date_of_birth;
} Person;

int is_numeric(const char *str);
int validate_date(const char *date_str, long *dob);

int main() {
    int count = 0, error = 0, i, j;
    Person records[Maxcount], temp;
    char nameInput[MaxLength], dateInput[10];

    printf("Names Entry & Sorting Program\nPlease input name and birthday (max 5 entries):\n");

    while (count < Maxcount && !error) {
        printf("Name (first last): ");
        if (!fgets(nameInput, MaxLength, stdin)) break;
        nameInput[strcspn(nameInput, "\n")] = '\0';

        if (strlen(nameInput) > 0) {
            records[count].name = malloc(strlen(nameInput) + 1);
            strcpy(records[count].name, nameInput);

            while (1) {
                printf("Birthday (YYYYMMDD): ");
                if (!fgets(dateInput, sizeof(dateInput), stdin)) break;
                dateInput[strcspn(dateInput, "\n")] = '\0';

                if (validate_date(dateInput, &records[count].date_of_birth)) break;
                else printf("Date format error! Please re-enter date (YYYYMMDD).\n");
            }
            printf("%-10s %-8ld Entry count: %2d malloc address: %p -> %p\n",
                   records[count].name, records[count].date_of_birth, count + 1,
                   (void*)&records[count], (void*)records[count].name);
            count++;
        } else {
            error = 1;
            printf("Incorrect name format!\n");
        }
    }

    if (!error) {
        for (i = 0; i < count - 1; i++)
            for (j = i + 1; j < count; j++)
                if (strcmp(records[i].name, records[j].name) > 0) {
                    temp = records[i];
                    records[i] = records[j];
                    records[j] = temp;
                }

        printf("\nSorted Records:\n");
        for (i = 0; i < count; i++) {
            printf("%-10s %-8ld Entry count: %2d malloc address: %p -> %p\n",
                   records[i].name, records[i].date_of_birth, i + 1,
                   (void*)&records[i], (void*)records[i].name);
            free(records[i].name);
        }
    } else {
        for (i = 0; i < count; i++) free(records[i].name);
    }

    return 0;
}

int is_numeric(const char *str) {
    int i;
    for (i = 0; str[i]; i++)
        if (!isdigit((unsigned char)str[i])) return 0;
    return 1;
}

int validate_date(const char *date_str, long *dob) {
    if (!is_numeric(date_str) || strlen(date_str) != 8) return 0;

    int year = atoi(strncpy((char[5]){0}, date_str, 4));
    int month = atoi(strncpy((char[3]){0}, date_str + 4, 2));
    int day = atoi(strncpy((char[3]){0}, date_str + 6, 2));

    if (year < 0 || year > 9999 || month < 1 || month > 12) return 0;
    if ((month == 2 && (day < 1 || day > 28)) ||
        ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) ||
        (day < 1 || day > 31)) return 0;

    *dob = atol(date_str);
    return 1;
}






