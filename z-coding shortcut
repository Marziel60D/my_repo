#include "pitches.h"  //add note library

// Pin definitions
const int buttonPin = 6;   // Push button connected to digital pin 6
const int buzzerPin = 13;  // Buzzer connected to digital pin 13
const int potPin = A0;     // Potentiometer connected to analog pin A0

// Melody settings
int melody[] = {262, 294, 330, 349, 392, 440, 494, 523}; // Melody frequencies (C4, D4, E4, F4, G4, A4, B4, C5)
int noteDurations[] = {500, 500, 500, 500, 500, 500, 500, 500}; // Duration of each note (in milliseconds)
int numNotes = sizeof(melody) / sizeof(melody[0]);

// Button and playback state
bool isPlaying = false;  // To keep track of whether the melody is playing or not
bool lastButtonState = LOW; // Last button state for debouncing
bool buttonPressed = false; // To check if the button has been pressed

void setup() {
  pinMode(buttonPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600); // For debugging purposes
}

void loop() {
  // Read the potentiometer value and map it to pitch adjustment range (-100Hz to +100Hz)
  int potValue = analogRead(potPin);
  int pitchAdjust = map(potValue, 0, 1023, -100, 100);
  
  // Read the current button state
  bool buttonState = digitalRead(buttonPin);
  
  // Toggle play/stop when the button is pressed (with debouncing)
  if (buttonState == HIGH && lastButtonState == LOW) {
    buttonPressed = !buttonPressed;  // Toggle the button pressed state
    delay(50);  // Debouncing delay
  }
  
  lastButtonState = buttonState; // Update the last button state

  // Update buzzer state based on button pressed state
  if (buttonPressed) {
    if (!isPlaying) {
      isPlaying = true; // Start playing the melody
    }
  } else {
    isPlaying = false; // Stop playing the melody
  }

  // If the melody should be playing
  if (isPlaying) {
    // Loop through all notes of the melody
    for (int thisNote = 0; thisNote < numNotes; thisNote++) {
      // Adjust the pitch of each note based on the potentiometer
      int adjustedFrequency = melody[thisNote] + pitchAdjust;

      // Play the note with the adjusted frequency
      tone(buzzerPin, adjustedFrequency);
      
      // Wait for the note to play, but continuously check if the button is pressed again to stop
      unsigned long noteStartTime = millis();
      while (millis() - noteStartTime < noteDurations[thisNote]) {
        // Check if the button is pressed during the note playback
        buttonState = digitalRead(buttonPin);
        if (buttonState == HIGH && lastButtonState == LOW) {
          isPlaying = false;  // Stop the melody
          noTone(buzzerPin);  // Stop the buzzer immediately
          delay(50);          // Debouncing delay
          break;              // Break out of the note loop to stop the melody
        }
        lastButtonState = buttonState; // Update the last button state
      }
      
      // If the melody was stopped, exit the for-loop early
      if (!isPlaying) {
        break;
      }
    }
  } else {
    noTone(buzzerPin);  // Stop the buzzer when the melody is stopped
  }
}
/////////-nowwwwww-////////////

#include "pitches.h"  //add note library

// Pin definitions (using registers)
const int buttonPin = 6;   // Push button connected to digital pin 6
const int buzzerPin = 13;  // Buzzer connected to digital pin 13
const int potPin = A0;     // Potentiometer connected to analog pin A0

// Melody settings
int melody[] = {262, 294, 330, 349, 392, 440, 494, 523}; // Melody frequencies (C4, D4, E4, F4, G4, A4, B4, C5)
int noteDurations[] = {500, 500, 500, 500, 500, 500, 500, 500}; // Duration of each note (in milliseconds)
int numNotes = sizeof(melody) / sizeof(melody[0]);

// Button and playback state
bool isPlaying = false;  // To keep track of whether the melody is playing or not
bool lastButtonState = LOW; // Last button state for debouncing
bool buttonPressed = false; // To check if the button has been pressed

void setup() {
  // Set the buzzer pin as output
  DDRB |= (1 << PB5); // Equivalent to pinMode(buzzerPin, OUTPUT);
  
  // Set the button pin as input
  DDRD &= ~(1 << PD6); // Equivalent to pinMode(buttonPin, INPUT);

  Serial.begin(9600); // For debugging purposes
}

void loop() {
  // Read the potentiometer value and map it to pitch adjustment range (-100Hz to +100Hz)
  int potValue = analogRead(potPin);
  int pitchAdjust = map(potValue, 0, 1023, -100, 100);
  
  // Read the current button state using register access
  bool buttonState = (PIND & (1 << PD6)) ? HIGH : LOW;  // Equivalent to digitalRead(buttonPin);
  
  // Toggle play/stop when the button is pressed (with debouncing)
  if (buttonState == HIGH && lastButtonState == LOW) {
    buttonPressed = !buttonPressed;  // Toggle the button pressed state
    delay(50);  // Debouncing delay
  }
  
  lastButtonState = buttonState; // Update the last button state

  // Update buzzer state based on button pressed state
  if (buttonPressed) {
    if (!isPlaying) {
      isPlaying = true; // Start playing the melody
    }
  } else {
    isPlaying = false; // Stop playing the melody
  }

  // If the melody should be playing
  if (isPlaying) {
    // Loop through all notes of the melody
    for (int thisNote = 0; thisNote < numNotes; thisNote++) {
      // Adjust the pitch of each note based on the potentiometer
      int adjustedFrequency = melody[thisNote] + pitchAdjust;

      // Play the note with the adjusted frequency
      tone(buzzerPin, adjustedFrequency);
      
      // Wait for the note to play, but continuously check if the button is pressed again to stop
      unsigned long noteStartTime = millis();
      while (millis() - noteStartTime < noteDurations[thisNote]) {
        // Check if the button is pressed during the note playback
        buttonState = (PIND & (1 << PD6)) ? HIGH : LOW;  // Read button state directly from the register
        if (buttonState == HIGH && lastButtonState == LOW) {
          isPlaying = false;  // Stop the melody
          noTone(buzzerPin);  // Stop the buzzer immediately
          delay(10);          // Debouncing delay
          break;              // Break out of the note loop to stop the melody
        }
        lastButtonState = buttonState; // Update the last button state
      }
      
      // If the melody was stopped, exit the for-loop early
      if (!isPlaying) {
        break;
      }
    }
  } else {
    noTone(buzzerPin);  // Stop the buzzer when the melody is stopped
  }
}
